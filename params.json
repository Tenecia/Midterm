{"name":"Movie Store Inventory Tracker ","tagline":"","body":"    using System;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using System.Text;\r\n    using System.Threading.Tasks;\r\n    using System.IO;\r\n    using System.Globalization;\r\n\r\n    namespace MidTerm\r\n    {\r\n       class Program\r\n        {\r\n        static void Main(string[] args)\r\n        {\r\n            //add a reader and spin this up from the file. if the file is blank use the hard coded values.\r\n            Dictionary<string, int> movie = new Dictionary<string, int>();\r\n            StreamReader inReader = new StreamReader(\"..\\\\..\\\\Inventory.txt\"); //reading the inventory text file \r\n            using (inReader)\r\n            {\r\n                string inline = inReader.ReadLine(); // reading just the first inventory line \r\n                if (inline != null) // if inventory line does not = empty then go on to while statement \r\n                {\r\n                    while (inline != null) //while the next line does not = empty then go to if statement \r\n                    {\r\n                        if (inline != \"\") // if line does not equal blank\"\" then ...\r\n                        {\r\n                            string[] m = inline.Split(','); // split the line at the comma (movie \",\" 1)\r\n                            //int m1 = int.Parse(m[m.Length]);\r\n                            movie.Add(m[0], 1); // adding the movie and its quanity/cost to the text file \r\n                        }\r\n                        \r\n                       inline = inReader.ReadLine(); // reading the next text file line in inventory \r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    movie.Add(\"maze runner\", 1); // (name of movie, cost of movie )\r\n                    movie.Add(\"the hunger games\", 1);\r\n                    movie.Add(\"black mass\", 1);\r\n                    movie.Add(\"the walk\", 1);\r\n                    movie.Add(\"legend\", 1);\r\n                    movie.Add(\"sicario\", 1);\r\n                    movie.Add(\"the intern\", 1);\r\n                    movie.Add(\"the visit\", 1);\r\n                    movie.Add(\"the perfect guy\", 1);\r\n                    movie.Add(\"everest\", 1);\r\n                }\r\n\r\n            }\r\n            \r\n            \r\n                 StreamWriter writer = new StreamWriter(\"..\\\\..\\\\CustomerInfo.txt\");  // creates text file for customer info\r\n            StreamWriter writerInventory = new StreamWriter(\"..\\\\..\\\\Inventory.txt\");// creates text file for inventory \r\n            StringBuilder buliderCustomer = new StringBuilder(); // builder for customer info\r\n            StringBuilder builderInentory = new StringBuilder(); // builder for inventory \r\n            //StreamReader \r\n            try\r\n            {           \r\n            \r\n                Console.WriteLine(\"CURRENT MOVIE SELECTION :\");\r\n            foreach (KeyValuePair<string,int> item in movie) // printing the full list of movies to console. \r\n            {\r\n                Console.WriteLine(item.Key + \",\" + item.Value); //( movie , price )\r\n            }\r\n            using (writer) \r\n            {\r\n                for (int i = 0; i < 3; i++) //will ask to enter three customer info and movie selection\r\n                {\r\n                    Console.WriteLine(\"Please enter customer FULL NAME, EMAIL, TELEPHONE NUMBER to begin check out.\");\r\n                   // string ownerinput = Console.ReadLine(); // taking in user input \r\n                   // ownerinput = ownerinput.ToLower(); // \r\n                    buliderCustomer.Append(Console.ReadLine().ToLower());  // adding customer info to stringbuilder \r\n                    Console.WriteLine(\"Please enter movie selection.\");\r\n                    String ownerinput = Console.ReadLine().ToLower(); // taking in movie selection, using a string because we have to \r\n                    //check in memory if the movie exists in the dictionary(memory). **not in text file yet**\r\n                    if (movie.ContainsKey(ownerinput)) // if statement is checking to see if the movie is in the dictionary(memory).  \r\n                    {\r\n                        buliderCustomer.Append(\",\"+ ownerinput + \", Due on: , \" + DateTime.Today.AddDays(7).ToShortDateString() + \"\\n\"); // adding the movie to customer string and adding duedate with stringbuilder, **in memory**\r\n                        movie.Remove(ownerinput); // removes movie from Dictionary memory. \r\n                       \r\n                        }\r\n                    else  // IF Mmovie is not in Inventory \r\n                    {\r\n                        Console.WriteLine(\" MOVIE NOT FOUND \");\r\n                    }\r\n                }\r\n                writer.WriteLine(buliderCustomer);// we have our finished customer builder, and are now writting that to Customer info text file \r\n            }\r\n\r\n                foreach (KeyValuePair<string,int> pair in movie) // using builder to build movie list **in memory**\r\n            {\r\n                builderInentory.AppendLine(pair.Key +\",\"+ pair.Value); // building the string for our dictionary **still in memory**               \r\n            }\r\n            Console.WriteLine(\"Movies left in Inventory\" + \"\\n\"+ builderInentory); // will print to console the remaining movies left after checkout. \r\n            using (writerInventory) // using writter to write \r\n            {\r\n                writerInventory.WriteLine(builderInentory); // now we are writting our builder inventory **which was in memory** to our text file. \r\n            }\r\n            //Console.ReadLine();\r\n\r\n                StreamWriter writeFee = new StreamWriter(\"..\\\\..\\\\LateFee.txt\"); // will list when MOVIE was returned, and IF there is a late fee. \r\n            StringBuilder buildFee = new StringBuilder(); // builds the late fee string in **memory**\r\n            StreamReader readCustomer = new StreamReader(\"..\\\\..\\\\CustomerInfo.txt\"); // reader will read through customer info \r\n\r\n                Console.WriteLine(\"\\n\" + \"The following Customer are Past Due :\" +\"\\n\");\r\n            string line = readCustomer.ReadLine(); // setting up reader to read customer info text document \r\n            int lineNumber = 0; // telling the reader to start reading at line number 0\r\n            while (line != null) // looping through the customer info text doc while string line is not empty \r\n            {\r\n                lineNumber++; // tells the reader to advance to the next line by 1 starting at 0\r\n                string[] splitLine = line.Split(','); // split is looking for a character so you have to use single quotes. Taking customer infor readline and \r\n                // spiting it on the comma. \r\n\r\n                    //int l = split.Length;\r\n                //Console.WriteLine(l);\r\n                DateTime DueDate = new DateTime();\r\n                DueDate = DateTime.Parse(splitLine[splitLine.Length - 1]);// when you go from a length to an index always do -1. telling it to go to the last element in split. \r\n                    // then we're parsing string[] split in to a datetime \r\n                Console.WriteLine(\"DueDate: \" + DueDate);\r\n                Random ran = new Random();\r\n                DateTime end = new DateTime();\r\n                end = DateTime.Today.AddDays(14); // ending 14 days from today, will include 7 days(rental time) plus seven addtional\r\n                // days to simulate late days. \r\n                DateTime start = new DateTime();\r\n                start = DateTime.Today.AddDays(5); // today plus 5 rental days to simulate movies returned on time \r\n                int range = (end - start).Days;  // gives you the number of days for the random generator to use \r\n                DateTime returnDate = start.AddDays(ran.Next(range) + lineNumber); // return date random generator \r\n\r\n                if (DueDate < returnDate)// compare due date to a return date \r\n                {\r\n\r\n                        buildFee.AppendLine(line);\r\n                    Console.WriteLine(\"{0} Return Date: {1}\", line, returnDate); // printing customer info file to console & return date\r\n                }\r\n                line = readCustomer.ReadLine(); // telling reader to read the next line. \r\n\r\n            }\r\n\r\n                using (writeFee)\r\n            {\r\n                writeFee.WriteLine(buildFee);// writting late customers to tex file \r\n            }\r\n\r\n                Console.ReadLine();\r\n            }\r\n            catch (FileNotFoundException) //text file could not be found \r\n            {\r\n\r\n                    Console.WriteLine(\"File not Found\");\r\n            }\r\n            catch (IOException e) // unable to write to a file \r\n            {\r\n                Console.WriteLine(\r\n                    \"{0}: The write operation could not \" +\r\n                    \"be performed because the specified \" +\r\n                    \"part of the file is locked.\",\r\n                    e.GetType().Name);\r\n            }\r\n            catch (FormatException) // catching and releasing duedate exception\r\n            {\r\n\r\n                }\r\n\r\n                catch (Exception e)  // general catch all exception \r\n            {\r\n                Console.WriteLine(e.Message);\r\n            }\r\n            finally\r\n            {\r\n                Console.ReadLine();\r\n            }\r\n            // read the Customer info file, put the customer name and movie in a list**in memory**, then ask what movie was returned on what date. If movie was returned on time \r\n            // write to console \"Customers account is clean\", If movie returned late, then implement a late fee method, and print that out to late fee text file. \r\n\r\n\r\n            }\r\n        public class Person\r\n        {\r\n            public string fullName;\r\n            public string email;\r\n            public string phone;\r\n            \r\n\r\n                public string FullName\r\n            {\r\n                get { return this.fullName; }\r\n                set { this.fullName = value; }\r\n            }\r\n\r\n                public string Email\r\n            {\r\n                get { return this.email; }\r\n                set { this.email = value; }\r\n            }\r\n\r\n                public string Phone\r\n            {\r\n                get { return this.phone; }\r\n                set { this.phone = value; }\r\n            }\r\n           \r\n\r\n\r\n                public Person()\r\n            {\r\n                fullName = \"Unknown\";\r\n                email = \"unknown@gmial.com\";\r\n                phone = \"1-216-333-1111\";\r\n                // checkouts = \"\";\r\n            }\r\n           \r\n\r\n                public void SetProfile(string newName, string newemail, string newphone)\r\n            {\r\n                FullName = newName;\r\n                Email = newemail;\r\n                Phone = newphone;\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n        }\r\n    }","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}